/* Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef AUDIO_TO_TACTILE_SRC_PROTO_TACTILE_DATA_PB_H_
#define AUDIO_TO_TACTILE_SRC_PROTO_TACTILE_DATA_PB_H_

/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.3 */

#ifndef PB_TACTILE_DATA_PB_H_INCLUDED
#define PB_TACTILE_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _OperationMode_InputOption {
  OperationMode_InputOption_ANALOG_EXTERNAL_MIC = 0,
  OperationMode_InputOption_PDM_MIC = 1,
  OperationMode_InputOption_SERIAL_PER_CHANNEL_WAVEFORM = 2,
  OperationMode_InputOption_SERIAL_FM_GENERATED_WAVEFORM = 3,
  OperationMode_InputOption_INTERNAL_WAVE_GENERATOR = 4,
  OperationMode_InputOption_BLE_AUDIO = 5,
  OperationMode_InputOption_BLE_PER_CHANNEL_WAVEFORM = 6,
  OperationMode_InputOption_BLE_FM_GENERATED_WAVEFORM = 7
} OperationMode_InputOption;

typedef enum _OperationMode_ProcessOption {
  OperationMode_ProcessOption_PASS_THROUGH = 0,
  OperationMode_ProcessOption_AUDIO_TO_TACTILE = 1
} OperationMode_ProcessOption;

typedef enum _OperationMode_OutputOption {
  OperationMode_OutputOption_SERIAL = 0,
  OperationMode_OutputOption_TACTORS = 1
} OperationMode_OutputOption;

typedef enum _GetRequest_GetOpion {
  GetRequest_GetOpion_TACTOR_HARDWARE_LAYOUT = 0,
  GetRequest_GetOpion_BATTERY = 1,
  GetRequest_GetOpion_SUPPORTED_OPERATION_MODES = 2,
  GetRequest_GetOpion_CURRENT_OPERATION_MODE = 3,
  GetRequest_GetOpion_OPERATION_IS_RUNNING = 4,
  GetRequest_GetOpion_OUTPUT_GAIN = 5,
  GetRequest_GetOpion_DENOISING = 6,
  GetRequest_GetOpion_COMPRESSION = 7,
  GetRequest_GetOpion_TACTOR_AMPLITUDES = 8,
  GetRequest_GetOpion_TACTOR_PHASES = 9,
  GetRequest_GetOpion_TACTOR_FREQUENCIES = 10
} GetRequest_GetOpion;

/* Struct definitions */
typedef struct _AnalogMicInputConfig {
  bool has_placeholder;
  int32_t placeholder;
} AnalogMicInputConfig;

typedef struct _AudioToTactileProcessConfig {
  bool has_placeholder;
  int32_t placeholder;
} AudioToTactileProcessConfig;

typedef struct _GetRequest {
  bool has_option;
  GetRequest_GetOpion option;
} GetRequest;

typedef struct _OperationMode {
  bool has_input;
  OperationMode_InputOption input;
  bool has_process;
  OperationMode_ProcessOption process;
  bool has_output;
  OperationMode_OutputOption output;
} OperationMode;

typedef struct _PassThroughProcessConfig {
  bool has_placeholder;
  int32_t placeholder;
} PassThroughProcessConfig;

typedef struct _PdmMicInputConfig {
  bool has_placeholder;
  int32_t placeholder;
} PdmMicInputConfig;

typedef struct _SerialOutputConfig {
  bool has_placeholder;
  int32_t placeholder;
} SerialOutputConfig;

typedef struct _StartTimeSyncRequest {
  bool has_send_time;
  float send_time;
} StartTimeSyncRequest;

typedef struct _Tactor {
  bool has_x;
  float x;
  bool has_y;
  float y;
  bool has_note;
  char note[17];
} Tactor;

typedef struct _TactorAmplitudes {
  pb_size_t tactor_amplitudes_count;
  float tactor_amplitudes[16];
} TactorAmplitudes;

typedef struct _TactorFrequencies {
  pb_size_t tactor_frequencies_count;
  float tactor_frequencies[16];
} TactorFrequencies;

typedef struct _TactorPhases {
  pb_size_t tactor_phases_count;
  float tactor_phases[16];
} TactorPhases;

typedef struct _TactorsOutputConfig {
  bool has_placeholder;
  int32_t placeholder;
} TactorsOutputConfig;

typedef struct _TimeSyncPing {
  bool has_client_start_time_sync_time;
  float client_start_time_sync_time;
  bool has_tactile_receive_time;
  float tactile_receive_time;
  bool has_tactile_send_ping_time;
  float tactile_send_ping_time;
} TimeSyncPing;

typedef struct _TimeSyncPong {
  bool has_client_start_time_sync_time;
  float client_start_time_sync_time;
  bool has_tactile_receive_time;
  float tactile_receive_time;
  bool has_tactile_send_ping_time;
  float tactile_send_ping_time;
  bool has_client_receive_ping_time;
  float client_receive_ping_time;
  bool has_client_send_pong_time;
  float client_send_pong_time;
} TimeSyncPong;

typedef struct _InputConfiguration {
  pb_size_t which_type;
  union {
    AnalogMicInputConfig analog_mic_config;
    PdmMicInputConfig pdm_mic_config;
  } type;
} InputConfiguration;

typedef struct _OutputConfiguration {
  pb_size_t which_type;
  union {
    SerialOutputConfig serial_config;
    TactorsOutputConfig tactors_output_config;
  } type;
} OutputConfiguration;

typedef struct _ProcessConfiguration {
  pb_size_t which_type;
  union {
    PassThroughProcessConfig pass_through_config;
    AudioToTactileProcessConfig audio_to_tactile_config;
  } type;
} ProcessConfiguration;

typedef struct _SupportedOperationModes {
  pb_size_t supported_operation_modes_count;
  OperationMode supported_operation_modes[20];
} SupportedOperationModes;

typedef struct _TactorHardwareLayout {
  pb_size_t tactors_count;
  Tactor tactors[16];
} TactorHardwareLayout;

typedef struct _GetResponse {
  pb_size_t which_type;
  union {
    TactorHardwareLayout tactor_hardware_layout_response;
    float battery_response;
    SupportedOperationModes supported_operation_modes_response;
    OperationMode current_operation_mode_response;
    bool operation_is_running_response;
    int32_t output_gain_response;
    int32_t denoising_response;
    int32_t compression_response;
    TactorAmplitudes tactor_amplitudes_response;
    TactorPhases tactor_phases_response;
    TactorFrequencies tactor_frequencies_response;
  } type;
} GetResponse;

typedef struct _OperationConfig {
  bool has_input_config;
  InputConfiguration input_config;
  bool has_process_config;
  ProcessConfiguration process_config;
  bool has_output_config;
  OutputConfiguration output_config;
} OperationConfig;

typedef struct _SetRequest {
  pb_size_t which_type;
  union {
    OperationMode operation_mode_request;
    OperationConfig operation_config_request;
    bool operation_run_request;
    int32_t output_gain_request;
    int32_t denoising_request;
    int32_t compression_request;
    TactorAmplitudes tactor_amplitudes_request;
    TactorPhases tactor_phases_request;
    TactorFrequencies tactor_frequencies_request;
  } type;
} SetRequest;

typedef struct _TactileMessage {
  pb_size_t which_type;
  union {
    GetResponse get_response;
    int32_t battery_status;
    char message[100];
    TimeSyncPing time_sync_ping;
  } type;
} TactileMessage;

typedef PB_BYTES_ARRAY_T(492) ClientMessage_ble_audio_t;
typedef PB_BYTES_ARRAY_T(492) ClientMessage_ble_fm_generated_waveform_t;
typedef struct _ClientMessage {
  pb_size_t which_type;
  union {
    GetRequest get_request;
    SetRequest set_request;
    ClientMessage_ble_audio_t ble_audio;
    ClientMessage_ble_fm_generated_waveform_t ble_fm_generated_waveform;
    bool warm_up;
    StartTimeSyncRequest start_time_sync_request;
    TimeSyncPong time_sync_pong;
  } type;
} ClientMessage;

/* Helper constants for enums */
#define _OperationMode_InputOption_MIN \
  OperationMode_InputOption_ANALOG_EXTERNAL_MIC
#define _OperationMode_InputOption_MAX \
  OperationMode_InputOption_BLE_FM_GENERATED_WAVEFORM
#define _OperationMode_InputOption_ARRAYSIZE \
  ((OperationMode_InputOption)(              \
      OperationMode_InputOption_BLE_FM_GENERATED_WAVEFORM + 1))

#define _OperationMode_ProcessOption_MIN \
  OperationMode_ProcessOption_PASS_THROUGH
#define _OperationMode_ProcessOption_MAX \
  OperationMode_ProcessOption_AUDIO_TO_TACTILE
#define _OperationMode_ProcessOption_ARRAYSIZE \
  ((OperationMode_ProcessOption)(              \
      OperationMode_ProcessOption_AUDIO_TO_TACTILE + 1))

#define _OperationMode_OutputOption_MIN OperationMode_OutputOption_SERIAL
#define _OperationMode_OutputOption_MAX OperationMode_OutputOption_TACTORS
#define _OperationMode_OutputOption_ARRAYSIZE \
  ((OperationMode_OutputOption)(OperationMode_OutputOption_TACTORS + 1))

#define _GetRequest_GetOpion_MIN GetRequest_GetOpion_TACTOR_HARDWARE_LAYOUT
#define _GetRequest_GetOpion_MAX GetRequest_GetOpion_TACTOR_FREQUENCIES
#define _GetRequest_GetOpion_ARRAYSIZE \
  ((GetRequest_GetOpion)(GetRequest_GetOpion_TACTOR_FREQUENCIES + 1))

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define AnalogMicInputConfig_init_default \
  { false, 0 }
#define PdmMicInputConfig_init_default \
  { false, 0 }
#define InputConfiguration_init_default      \
  {                                          \
    0, { AnalogMicInputConfig_init_default } \
  }
#define PassThroughProcessConfig_init_default \
  { false, 0 }
#define AudioToTactileProcessConfig_init_default \
  { false, 0 }
#define ProcessConfiguration_init_default        \
  {                                              \
    0, { PassThroughProcessConfig_init_default } \
  }
#define SerialOutputConfig_init_default \
  { false, 0 }
#define TactorsOutputConfig_init_default \
  { false, 0 }
#define OutputConfiguration_init_default   \
  {                                        \
    0, { SerialOutputConfig_init_default } \
  }
#define OperationMode_init_default                \
  {                                               \
    false, _OperationMode_InputOption_MIN, false, \
        _OperationMode_ProcessOption_MIN, false,  \
        _OperationMode_OutputOption_MIN           \
  }
#define OperationConfig_init_default               \
  {                                                \
    false, InputConfiguration_init_default, false, \
        ProcessConfiguration_init_default, false,  \
        OutputConfiguration_init_default           \
  }
#define TactorAmplitudes_init_default                     \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define TactorPhases_init_default                         \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define TactorFrequencies_init_default                    \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define SupportedOperationModes_init_default                      \
  {                                                               \
    0, {                                                          \
      OperationMode_init_default, OperationMode_init_default,     \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default, \
          OperationMode_init_default, OperationMode_init_default  \
    }                                                             \
  }
#define Tactor_init_default \
  { false, 0, false, 0, false, "" }
#define TactorHardwareLayout_init_default                                \
  {                                                                      \
    0, {                                                                 \
      Tactor_init_default, Tactor_init_default, Tactor_init_default,     \
          Tactor_init_default, Tactor_init_default, Tactor_init_default, \
          Tactor_init_default, Tactor_init_default, Tactor_init_default, \
          Tactor_init_default, Tactor_init_default, Tactor_init_default, \
          Tactor_init_default, Tactor_init_default, Tactor_init_default, \
          Tactor_init_default                                            \
    }                                                                    \
  }
#define GetResponse_init_default             \
  {                                          \
    0, { TactorHardwareLayout_init_default } \
  }
#define TimeSyncPing_init_default \
  { false, 0, false, 0, false, 0 }
#define TimeSyncPong_init_default \
  { false, 0, false, 0, false, 0, false, 0, false, 0 }
#define TactileMessage_init_default   \
  {                                 \
    0, { GetResponse_init_default } \
  }
#define GetRequest_init_default \
  { false, _GetRequest_GetOpion_MIN }
#define SetRequest_init_default       \
  {                                   \
    0, { OperationMode_init_default } \
  }
#define StartTimeSyncRequest_init_default \
  { false, 0 }
#define ClientMessage_init_default \
  {                                \
    0, { GetRequest_init_default } \
  }
#define AnalogMicInputConfig_init_zero \
  { false, 0 }
#define PdmMicInputConfig_init_zero \
  { false, 0 }
#define InputConfiguration_init_zero      \
  {                                       \
    0, { AnalogMicInputConfig_init_zero } \
  }
#define PassThroughProcessConfig_init_zero \
  { false, 0 }
#define AudioToTactileProcessConfig_init_zero \
  { false, 0 }
#define ProcessConfiguration_init_zero        \
  {                                           \
    0, { PassThroughProcessConfig_init_zero } \
  }
#define SerialOutputConfig_init_zero \
  { false, 0 }
#define TactorsOutputConfig_init_zero \
  { false, 0 }
#define OutputConfiguration_init_zero   \
  {                                     \
    0, { SerialOutputConfig_init_zero } \
  }
#define OperationMode_init_zero                   \
  {                                               \
    false, _OperationMode_InputOption_MIN, false, \
        _OperationMode_ProcessOption_MIN, false,  \
        _OperationMode_OutputOption_MIN           \
  }
#define OperationConfig_init_zero                                            \
  {                                                                          \
    false, InputConfiguration_init_zero, false,                              \
        ProcessConfiguration_init_zero, false, OutputConfiguration_init_zero \
  }
#define TactorAmplitudes_init_zero                        \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define TactorPhases_init_zero                            \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define TactorFrequencies_init_zero                       \
  {                                                       \
    0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } \
  }
#define SupportedOperationModes_init_zero                   \
  {                                                         \
    0, {                                                    \
      OperationMode_init_zero, OperationMode_init_zero,     \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero, \
          OperationMode_init_zero, OperationMode_init_zero  \
    }                                                       \
  }
#define Tactor_init_zero \
  { false, 0, false, 0, false, "" }
#define TactorHardwareLayout_init_zero                                        \
  {                                                                           \
    0, {                                                                      \
      Tactor_init_zero, Tactor_init_zero, Tactor_init_zero, Tactor_init_zero, \
          Tactor_init_zero, Tactor_init_zero, Tactor_init_zero,               \
          Tactor_init_zero, Tactor_init_zero, Tactor_init_zero,               \
          Tactor_init_zero, Tactor_init_zero, Tactor_init_zero,               \
          Tactor_init_zero, Tactor_init_zero, Tactor_init_zero                \
    }                                                                         \
  }
#define GetResponse_init_zero             \
  {                                       \
    0, { TactorHardwareLayout_init_zero } \
  }
#define TimeSyncPing_init_zero \
  { false, 0, false, 0, false, 0 }
#define TimeSyncPong_init_zero \
  { false, 0, false, 0, false, 0, false, 0, false, 0 }
#define TactileMessage_init_zero   \
  {                              \
    0, { GetResponse_init_zero } \
  }
#define GetRequest_init_zero \
  { false, _GetRequest_GetOpion_MIN }
#define SetRequest_init_zero       \
  {                                \
    0, { OperationMode_init_zero } \
  }
#define StartTimeSyncRequest_init_zero \
  { false, 0 }
#define ClientMessage_init_zero \
  {                             \
    0, { GetRequest_init_zero } \
  }

/* Field tags (for use in manual encoding/decoding) */
#define AnalogMicInputConfig_placeholder_tag 1
#define AudioToTactileProcessConfig_placeholder_tag 1
#define GetRequest_option_tag 1
#define OperationMode_input_tag 1
#define OperationMode_process_tag 2
#define OperationMode_output_tag 3
#define PassThroughProcessConfig_placeholder_tag 1
#define PdmMicInputConfig_placeholder_tag 1
#define SerialOutputConfig_placeholder_tag 1
#define StartTimeSyncRequest_send_time_tag 1
#define Tactor_x_tag 1
#define Tactor_y_tag 2
#define Tactor_note_tag 3
#define TactorAmplitudes_tactor_amplitudes_tag 1
#define TactorFrequencies_tactor_frequencies_tag 1
#define TactorPhases_tactor_phases_tag 1
#define TactorsOutputConfig_placeholder_tag 1
#define TimeSyncPing_client_start_time_sync_time_tag 1
#define TimeSyncPing_tactile_receive_time_tag 2
#define TimeSyncPing_tactile_send_ping_time_tag 3
#define TimeSyncPong_client_start_time_sync_time_tag 1
#define TimeSyncPong_tactile_receive_time_tag 2
#define TimeSyncPong_tactile_send_ping_time_tag 3
#define TimeSyncPong_client_receive_ping_time_tag 4
#define TimeSyncPong_client_send_pong_time_tag 5
#define InputConfiguration_analog_mic_config_tag 1
#define InputConfiguration_pdm_mic_config_tag 2
#define OutputConfiguration_serial_config_tag 1
#define OutputConfiguration_tactors_output_config_tag 2
#define ProcessConfiguration_pass_through_config_tag 1
#define ProcessConfiguration_audio_to_tactile_config_tag 2
#define SupportedOperationModes_supported_operation_modes_tag 1
#define TactorHardwareLayout_tactors_tag 1
#define GetResponse_tactor_hardware_layout_response_tag 1
#define GetResponse_battery_response_tag 2
#define GetResponse_supported_operation_modes_response_tag 3
#define GetResponse_current_operation_mode_response_tag 4
#define GetResponse_operation_is_running_response_tag 5
#define GetResponse_output_gain_response_tag 6
#define GetResponse_denoising_response_tag 7
#define GetResponse_compression_response_tag 8
#define GetResponse_tactor_amplitudes_response_tag 9
#define GetResponse_tactor_phases_response_tag 10
#define GetResponse_tactor_frequencies_response_tag 11
#define OperationConfig_input_config_tag 1
#define OperationConfig_process_config_tag 2
#define OperationConfig_output_config_tag 3
#define SetRequest_operation_mode_request_tag 1
#define SetRequest_operation_config_request_tag 2
#define SetRequest_operation_run_request_tag 3
#define SetRequest_output_gain_request_tag 4
#define SetRequest_denoising_request_tag 5
#define SetRequest_compression_request_tag 6
#define SetRequest_tactor_amplitudes_request_tag 7
#define SetRequest_tactor_phases_request_tag 8
#define SetRequest_tactor_frequencies_request_tag 9
#define TactileMessage_get_response_tag 1
#define TactileMessage_battery_status_tag 2
#define TactileMessage_message_tag 3
#define TactileMessage_time_sync_ping_tag 4
#define ClientMessage_get_request_tag 1
#define ClientMessage_set_request_tag 2
#define ClientMessage_ble_audio_tag 3
#define ClientMessage_ble_fm_generated_waveform_tag 4
#define ClientMessage_warm_up_tag 5
#define ClientMessage_start_time_sync_request_tag 6
#define ClientMessage_time_sync_pong_tag 7

/* Struct field encoding specification for nanopb */
#define AnalogMicInputConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define AnalogMicInputConfig_CALLBACK NULL
#define AnalogMicInputConfig_DEFAULT NULL

#define PdmMicInputConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define PdmMicInputConfig_CALLBACK NULL
#define PdmMicInputConfig_DEFAULT NULL

#define InputConfiguration_FIELDLIST(X, a)                \
  X(a, STATIC, ONEOF, MESSAGE,                            \
    (type, analog_mic_config, type.analog_mic_config), 1) \
  X(a, STATIC, ONEOF, MESSAGE, (type, pdm_mic_config, type.pdm_mic_config), 2)
#define InputConfiguration_CALLBACK NULL
#define InputConfiguration_DEFAULT NULL
#define InputConfiguration_type_analog_mic_config_MSGTYPE AnalogMicInputConfig
#define InputConfiguration_type_pdm_mic_config_MSGTYPE PdmMicInputConfig

#define PassThroughProcessConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define PassThroughProcessConfig_CALLBACK NULL
#define PassThroughProcessConfig_DEFAULT NULL

#define AudioToTactileProcessConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define AudioToTactileProcessConfig_CALLBACK NULL
#define AudioToTactileProcessConfig_DEFAULT NULL

#define ProcessConfiguration_FIELDLIST(X, a)                  \
  X(a, STATIC, ONEOF, MESSAGE,                                \
    (type, pass_through_config, type.pass_through_config), 1) \
  X(a, STATIC, ONEOF, MESSAGE,                                \
    (type, audio_to_tactile_config, type.audio_to_tactile_config), 2)
#define ProcessConfiguration_CALLBACK NULL
#define ProcessConfiguration_DEFAULT NULL
#define ProcessConfiguration_type_pass_through_config_MSGTYPE \
  PassThroughProcessConfig
#define ProcessConfiguration_type_audio_to_tactile_config_MSGTYPE \
  AudioToTactileProcessConfig

#define SerialOutputConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define SerialOutputConfig_CALLBACK NULL
#define SerialOutputConfig_DEFAULT NULL

#define TactorsOutputConfig_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, INT32, placeholder, 1)
#define TactorsOutputConfig_CALLBACK NULL
#define TactorsOutputConfig_DEFAULT NULL

#define OutputConfiguration_FIELDLIST(X, a)                                  \
  X(a, STATIC, ONEOF, MESSAGE, (type, serial_config, type.serial_config), 1) \
  X(a, STATIC, ONEOF, MESSAGE,                                               \
    (type, tactors_output_config, type.tactors_output_config), 2)
#define OutputConfiguration_CALLBACK NULL
#define OutputConfiguration_DEFAULT NULL
#define OutputConfiguration_type_serial_config_MSGTYPE SerialOutputConfig
#define OutputConfiguration_type_tactors_output_config_MSGTYPE \
  TactorsOutputConfig

#define OperationMode_FIELDLIST(X, a)       \
  X(a, STATIC, OPTIONAL, UENUM, input, 1)   \
  X(a, STATIC, OPTIONAL, UENUM, process, 2) \
  X(a, STATIC, OPTIONAL, UENUM, output, 3)
#define OperationMode_CALLBACK NULL
#define OperationMode_DEFAULT NULL

#define OperationConfig_FIELDLIST(X, a)              \
  X(a, STATIC, OPTIONAL, MESSAGE, input_config, 1)   \
  X(a, STATIC, OPTIONAL, MESSAGE, process_config, 2) \
  X(a, STATIC, OPTIONAL, MESSAGE, output_config, 3)
#define OperationConfig_CALLBACK NULL
#define OperationConfig_DEFAULT NULL
#define OperationConfig_input_config_MSGTYPE InputConfiguration
#define OperationConfig_process_config_MSGTYPE ProcessConfiguration
#define OperationConfig_output_config_MSGTYPE OutputConfiguration

#define TactorAmplitudes_FIELDLIST(X, a) \
  X(a, STATIC, REPEATED, FLOAT, tactor_amplitudes, 1)
#define TactorAmplitudes_CALLBACK NULL
#define TactorAmplitudes_DEFAULT NULL

#define TactorPhases_FIELDLIST(X, a) \
  X(a, STATIC, REPEATED, FLOAT, tactor_phases, 1)
#define TactorPhases_CALLBACK NULL
#define TactorPhases_DEFAULT NULL

#define TactorFrequencies_FIELDLIST(X, a) \
  X(a, STATIC, REPEATED, FLOAT, tactor_frequencies, 1)
#define TactorFrequencies_CALLBACK NULL
#define TactorFrequencies_DEFAULT NULL

#define SupportedOperationModes_FIELDLIST(X, a) \
  X(a, STATIC, REPEATED, MESSAGE, supported_operation_modes, 1)
#define SupportedOperationModes_CALLBACK NULL
#define SupportedOperationModes_DEFAULT NULL
#define SupportedOperationModes_supported_operation_modes_MSGTYPE OperationMode

#define Tactor_FIELDLIST(X, a)        \
  X(a, STATIC, OPTIONAL, FLOAT, x, 1) \
  X(a, STATIC, OPTIONAL, FLOAT, y, 2) \
  X(a, STATIC, OPTIONAL, STRING, note, 3)
#define Tactor_CALLBACK NULL
#define Tactor_DEFAULT NULL

#define TactorHardwareLayout_FIELDLIST(X, a) \
  X(a, STATIC, REPEATED, MESSAGE, tactors, 1)
#define TactorHardwareLayout_CALLBACK NULL
#define TactorHardwareLayout_DEFAULT NULL
#define TactorHardwareLayout_tactors_MSGTYPE Tactor

#define GetResponse_FIELDLIST(X, a)                                            \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, tactor_hardware_layout_response,                                    \
     type.tactor_hardware_layout_response),                                    \
    1)                                                                         \
  X(a, STATIC, ONEOF, FLOAT, (type, battery_response, type.battery_response),  \
    2)                                                                         \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, supported_operation_modes_response,                                 \
     type.supported_operation_modes_response),                                 \
    3)                                                                         \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, current_operation_mode_response,                                    \
     type.current_operation_mode_response),                                    \
    4)                                                                         \
  X(a, STATIC, ONEOF, BOOL,                                                    \
    (type, operation_is_running_response, type.operation_is_running_response), \
    5)                                                                         \
  X(a, STATIC, ONEOF, INT32,                                                   \
    (type, output_gain_response, type.output_gain_response), 6)                \
  X(a, STATIC, ONEOF, INT32,                                                   \
    (type, denoising_response, type.denoising_response), 7)                    \
  X(a, STATIC, ONEOF, INT32,                                                   \
    (type, compression_response, type.compression_response), 8)                \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, tactor_amplitudes_response, type.tactor_amplitudes_response), 9)    \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, tactor_phases_response, type.tactor_phases_response), 10)           \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (type, tactor_frequencies_response, type.tactor_frequencies_response), 11)
#define GetResponse_CALLBACK NULL
#define GetResponse_DEFAULT NULL
#define GetResponse_type_tactor_hardware_layout_response_MSGTYPE \
  TactorHardwareLayout
#define GetResponse_type_supported_operation_modes_response_MSGTYPE \
  SupportedOperationModes
#define GetResponse_type_current_operation_mode_response_MSGTYPE OperationMode
#define GetResponse_type_tactor_amplitudes_response_MSGTYPE TactorAmplitudes
#define GetResponse_type_tactor_phases_response_MSGTYPE TactorPhases
#define GetResponse_type_tactor_frequencies_response_MSGTYPE TactorFrequencies

#define TimeSyncPing_FIELDLIST(X, a)                            \
  X(a, STATIC, OPTIONAL, FLOAT, client_start_time_sync_time, 1) \
  X(a, STATIC, OPTIONAL, FLOAT, tactile_receive_time, 2)          \
  X(a, STATIC, OPTIONAL, FLOAT, tactile_send_ping_time, 3)
#define TimeSyncPing_CALLBACK NULL
#define TimeSyncPing_DEFAULT NULL

#define TimeSyncPong_FIELDLIST(X, a)                            \
  X(a, STATIC, OPTIONAL, FLOAT, client_start_time_sync_time, 1) \
  X(a, STATIC, OPTIONAL, FLOAT, tactile_receive_time, 2)          \
  X(a, STATIC, OPTIONAL, FLOAT, tactile_send_ping_time, 3)        \
  X(a, STATIC, OPTIONAL, FLOAT, client_receive_ping_time, 4)    \
  X(a, STATIC, OPTIONAL, FLOAT, client_send_pong_time, 5)
#define TimeSyncPong_CALLBACK NULL
#define TimeSyncPong_DEFAULT NULL

#define TactileMessage_FIELDLIST(X, a)                                         \
  X(a, STATIC, ONEOF, MESSAGE, (type, get_response, type.get_response), 1)   \
  X(a, STATIC, ONEOF, INT32, (type, battery_status, type.battery_status), 2) \
  X(a, STATIC, ONEOF, STRING, (type, message, type.message), 3)              \
  X(a, STATIC, ONEOF, MESSAGE, (type, time_sync_ping, type.time_sync_ping), 4)
#define TactileMessage_CALLBACK NULL
#define TactileMessage_DEFAULT NULL
#define TactileMessage_type_get_response_MSGTYPE GetResponse
#define TactileMessage_type_time_sync_ping_MSGTYPE TimeSyncPing

#define GetRequest_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, UENUM, option, 1)
#define GetRequest_CALLBACK NULL
#define GetRequest_DEFAULT NULL

#define SetRequest_FIELDLIST(X, a)                                        \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, operation_mode_request, type.operation_mode_request), 1)       \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, operation_config_request, type.operation_config_request), 2)   \
  X(a, STATIC, ONEOF, BOOL,                                               \
    (type, operation_run_request, type.operation_run_request), 3)         \
  X(a, STATIC, ONEOF, INT32,                                              \
    (type, output_gain_request, type.output_gain_request), 4)             \
  X(a, STATIC, ONEOF, INT32,                                              \
    (type, denoising_request, type.denoising_request), 5)                 \
  X(a, STATIC, ONEOF, INT32,                                              \
    (type, compression_request, type.compression_request), 6)             \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, tactor_amplitudes_request, type.tactor_amplitudes_request), 7) \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, tactor_phases_request, type.tactor_phases_request), 8)         \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, tactor_frequencies_request, type.tactor_frequencies_request), 9)
#define SetRequest_CALLBACK NULL
#define SetRequest_DEFAULT NULL
#define SetRequest_type_operation_mode_request_MSGTYPE OperationMode
#define SetRequest_type_operation_config_request_MSGTYPE OperationConfig
#define SetRequest_type_tactor_amplitudes_request_MSGTYPE TactorAmplitudes
#define SetRequest_type_tactor_phases_request_MSGTYPE TactorPhases
#define SetRequest_type_tactor_frequencies_request_MSGTYPE TactorFrequencies

#define StartTimeSyncRequest_FIELDLIST(X, a) \
  X(a, STATIC, OPTIONAL, FLOAT, send_time, 1)
#define StartTimeSyncRequest_CALLBACK NULL
#define StartTimeSyncRequest_DEFAULT NULL

#define ClientMessage_FIELDLIST(X, a)                                     \
  X(a, STATIC, ONEOF, MESSAGE, (type, get_request, type.get_request), 1)  \
  X(a, STATIC, ONEOF, MESSAGE, (type, set_request, type.set_request), 2)  \
  X(a, STATIC, ONEOF, BYTES, (type, ble_audio, type.ble_audio), 3)        \
  X(a, STATIC, ONEOF, BYTES,                                              \
    (type, ble_fm_generated_waveform, type.ble_fm_generated_waveform), 4) \
  X(a, STATIC, ONEOF, BOOL, (type, warm_up, type.warm_up), 5)             \
  X(a, STATIC, ONEOF, MESSAGE,                                            \
    (type, start_time_sync_request, type.start_time_sync_request), 6)     \
  X(a, STATIC, ONEOF, MESSAGE, (type, time_sync_pong, type.time_sync_pong), 7)
#define ClientMessage_CALLBACK NULL
#define ClientMessage_DEFAULT NULL
#define ClientMessage_type_get_request_MSGTYPE GetRequest
#define ClientMessage_type_set_request_MSGTYPE SetRequest
#define ClientMessage_type_start_time_sync_request_MSGTYPE StartTimeSyncRequest
#define ClientMessage_type_time_sync_pong_MSGTYPE TimeSyncPong

extern const pb_msgdesc_t AnalogMicInputConfig_msg;
extern const pb_msgdesc_t PdmMicInputConfig_msg;
extern const pb_msgdesc_t InputConfiguration_msg;
extern const pb_msgdesc_t PassThroughProcessConfig_msg;
extern const pb_msgdesc_t AudioToTactileProcessConfig_msg;
extern const pb_msgdesc_t ProcessConfiguration_msg;
extern const pb_msgdesc_t SerialOutputConfig_msg;
extern const pb_msgdesc_t TactorsOutputConfig_msg;
extern const pb_msgdesc_t OutputConfiguration_msg;
extern const pb_msgdesc_t OperationMode_msg;
extern const pb_msgdesc_t OperationConfig_msg;
extern const pb_msgdesc_t TactorAmplitudes_msg;
extern const pb_msgdesc_t TactorPhases_msg;
extern const pb_msgdesc_t TactorFrequencies_msg;
extern const pb_msgdesc_t SupportedOperationModes_msg;
extern const pb_msgdesc_t Tactor_msg;
extern const pb_msgdesc_t TactorHardwareLayout_msg;
extern const pb_msgdesc_t GetResponse_msg;
extern const pb_msgdesc_t TimeSyncPing_msg;
extern const pb_msgdesc_t TimeSyncPong_msg;
extern const pb_msgdesc_t TactileMessage_msg;
extern const pb_msgdesc_t GetRequest_msg;
extern const pb_msgdesc_t SetRequest_msg;
extern const pb_msgdesc_t StartTimeSyncRequest_msg;
extern const pb_msgdesc_t ClientMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define AnalogMicInputConfig_fields &AnalogMicInputConfig_msg
#define PdmMicInputConfig_fields &PdmMicInputConfig_msg
#define InputConfiguration_fields &InputConfiguration_msg
#define PassThroughProcessConfig_fields &PassThroughProcessConfig_msg
#define AudioToTactileProcessConfig_fields &AudioToTactileProcessConfig_msg
#define ProcessConfiguration_fields &ProcessConfiguration_msg
#define SerialOutputConfig_fields &SerialOutputConfig_msg
#define TactorsOutputConfig_fields &TactorsOutputConfig_msg
#define OutputConfiguration_fields &OutputConfiguration_msg
#define OperationMode_fields &OperationMode_msg
#define OperationConfig_fields &OperationConfig_msg
#define TactorAmplitudes_fields &TactorAmplitudes_msg
#define TactorPhases_fields &TactorPhases_msg
#define TactorFrequencies_fields &TactorFrequencies_msg
#define SupportedOperationModes_fields &SupportedOperationModes_msg
#define Tactor_fields &Tactor_msg
#define TactorHardwareLayout_fields &TactorHardwareLayout_msg
#define GetResponse_fields &GetResponse_msg
#define TimeSyncPing_fields &TimeSyncPing_msg
#define TimeSyncPong_fields &TimeSyncPong_msg
#define TactileMessage_fields &TactileMessage_msg
#define GetRequest_fields &GetRequest_msg
#define SetRequest_fields &SetRequest_msg
#define StartTimeSyncRequest_fields &StartTimeSyncRequest_msg
#define ClientMessage_fields &ClientMessage_msg

/* Maximum encoded size of messages (where known) */
#define AnalogMicInputConfig_size 11
#define PdmMicInputConfig_size 11
#define InputConfiguration_size 13
#define PassThroughProcessConfig_size 11
#define AudioToTactileProcessConfig_size 11
#define ProcessConfiguration_size 13
#define SerialOutputConfig_size 11
#define TactorsOutputConfig_size 11
#define OutputConfiguration_size 13
#define OperationMode_size 6
#define OperationConfig_size 45
#define TactorAmplitudes_size 80
#define TactorPhases_size 80
#define TactorFrequencies_size 80
#define SupportedOperationModes_size 160
#define Tactor_size 28
#define TactorHardwareLayout_size 480
#define GetResponse_size 483
#define TimeSyncPing_size 15
#define TimeSyncPong_size 25
#define TactileMessage_size 486
#define GetRequest_size 2
#define SetRequest_size 82
#define StartTimeSyncRequest_size 5
#define ClientMessage_size 495

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

#endif  /* AUDIO_TO_TACTILE_SRC_PROTO_TACTILE_DATA_PB_H_ */
